<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Jetbrains系列产品重置试用方法]]></title>
    <url>%2F2020%2F12%2F29%2Fug4r3u%2F</url>
    <content type="text"><![CDATA[本站惯例：本文假定你知道 Jetbrains 家的产品。不知道可以问问搜索引擎。没错，jetbrains-agent这个项目停止了。市面上漫天飞的各种最新都是其他大神的魔改版本。[/斜眼]我不是要专门写个博文来说明jetbrains-agent项目已经停止，然后缅怀感叹一番。这篇文章是想和大家聊聊另一种思路。 0x0. 项目背景Jetbrains 家的产品有一个很良心的地方，他会允许你试用30天（这个数字写死在代码里了）以评估是否你真的需要为它而付费。但很多时候会出现一种情况：IDE 并不能按照我们实际的试用时间来计算。我举个例子：如果我们开始了试用，然后媳妇生孩子要你回去陪产！陪产时我们并无空闲对 IDE 试用评估，它依旧算试用时间。（只是举个例子，或许你并没有女朋友）发现了吗？你未能真的有30天来对它进行全面的试用评估，你甚至无法作出是否付费的决定。此时你会想要延长试用时间，然而 Jetbrains 并未提供相关功能，该怎么办？事实上有一款插件可以实现这个功能，你或许可以用它来重置一下试用时间。但切记不要无休止的一直试用，这并不是这个插件的本意！ 0x1. 如何安装1). 插件市场安装： 在Settings/Preferences... -&gt; Plugins 内手动添加第三方插件仓库地址：[https://plugins.zhile.io](https://plugins.zhile.io) 搜索：IDE Eval Reset插件进行安装。如果搜索不到请注意是否做好了上一步？网络是否通畅？ 插件会提示安装成功。 2). 下载安装： 点击这个链接(v2.1.6)下载插件的zip包（macOS 可能会自动解压，然后把zip包丢进回收站） 通常可以直接把zip包拖进 IDE 的窗口来进行插件的安装。如果无法拖动安装，你可以在Settings/Preferences... -&gt; Plugins 里手动安装插件（Install Plugin From Disk...） 插件会提示安装成功。 0x2. 如何使用 一般来说，在 IDE 窗口切出去或切回来时（窗口失去/得到焦点）会触发事件，检测是否长时间（25天）没有重置，给通知让你选择。（初次安装因为无法获取上次重置时间，会直接给予提示） 也可以手动唤出插件的主界面： 如果 IDE 没有打开项目，在Welcome界面点击菜单：Get Help -&gt; Eval Reset 如果 IDE 打开了项目，点击菜单：Help -&gt; Eval Reset 唤出的插件主界面中包含了一些显示信息，2个按钮，1个勾选项： 按钮：Reload 用来刷新界面上的显示信息。 按钮：Reset 点击会询问是否重置试用信息并重启 IDE。选择Yes则执行重置操作并重启 IDE 生效，选择No则什么也不做。（此为手动重置方式） 勾选项：Auto reset before per restart 如果勾选了，则自勾选后每次重启/退出 IDE 时会自动重置试用信息，你无需做额外的事情。（此为自动重置方式） 0x3. 如何更新1). 插件更新机制（推荐）： IDE 会自行检测其自身和所安装插件的更新并给予提示。如果本插件有更新，你会收到提示看到更新日志，自行选择是否更新。 点击 IDE 的Check for Updates... 菜单手动检测 IDE 和所安装插件的更新。如果本插件有更新，你会收到提示看到更新日志，自行选择是否更新。 插件更新可能会需要重启 IDE。 2). 手动更新： 从本页面下载最新的插件zip包安装更新。参考本文：下载安装小节。 插件更新需要重启 IDE。 0x4. 一些说明 本插件默认不会显示其主界面，如果你需要，参考本文：如何使用小节。 市场付费插件的试用信息也会一并重置。 对于某些付费插件（如:Iedis 2,MinBatis）来说，你可能需要去取掉javaagent配置（如果有）后重启 IDE： 如果 IDE 没有打开项目，在Welcome界面点击菜单：Configure -&gt; Edit Custom VM Options... -&gt; 移除 -javaagent: 开头的行。 如果 IDE 打开了项目，点击菜单：Help -&gt; Edit Custom VM Options... -&gt; 移除 -javaagent: 开头的行。 重置需要重启 IDE 生效！ 重置后并不弹出Licenses对话框让你选择输入 License 或试用，这和之前的重置脚本/插件不同（省去这烦人的一步）。 如果长达25天不曾有任何重置动作，IDE 会有通知询问你是否进行重置。 如果勾选：Auto reset before per restart ，重置是静默无感知的。 简单来说：勾选了Auto reset before per restart则无需再管，一劳永逸。 0x5. 开源信息 插件是学习研究项目，源代码是开放的。源码仓库地址：Gitee。 如果你有更好的想法，欢迎给我提Pull Request来共同研究完善。 插件源码使用：GPL-2.0开源协议发布。 插件使用PHP编写，毕竟PHP是世界上最好的编程语言！ 0x6. 支持的产品 IntelliJ IDEA AppCode CLion DataGrip GoLand PhpStorm PyCharm Rider RubyMine WebStorm 下面是国际惯例： 本项目只做个人学习研究之用，不得用于商业用途！若资金允许，请点击链接购买正版，谢谢合作！学生凭学生证可免费申请正版授权！创业公司可5 折购买正版授权！ 本文作者： Neo Peng 本文链接： https://zhile.io/2020/11/18/jetbrains-eval-reset.html 版权声明： 本博客所有文章除特别声明外，均采用 CC BY-NC-ND 4.0 许可协议。转载请注明出处！]]></content>
      <categories>
        <category>常用软件</category>
      </categories>
      <tags>
        <tag>JetBrains</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux常用网络命令]]></title>
    <url>%2F2020%2F11%2F10%2Fhb4ym3%2F</url>
    <content type="text"><![CDATA[curl www.baidu.com -X POST -H “Content-Type:application/json” -d ‘{“name”: “张三”,”pid”: “320753195803171826”,”mobile”: “12362493526”}’ rz -bey 传包忽略编码 scp]]></content>
  </entry>
  <entry>
    <title><![CDATA[Spring源码分析]]></title>
    <url>%2F2020%2F11%2F06%2Frydn3g%2F</url>
    <content type="text"><![CDATA[先去 github 或码云下载 Spring 源码,我这里直接 fork 一份到自己的 github,然后从自己的 github 仓库拉 clone Spring 官方代码地址: https://github.com/spring-projects/spring-framework 点右上角的 fork 到自己的 github 找到刚才 fork 好的仓库(相当于直接把 spring 的官方仓库拷贝一份到自己仓库) , 找到地址,直接 clone git clone https://github.com/xiayuyuyu/spring-framework.git等一段时间(有梯子的会稍快),没装 git 的自己装一波,课可以选择下载 zip 包解压 配置 gradle (不赘述) 进入刚才的 spring-framwork 文件夹下, gradlew :spring-oxm:compileTestJava 进行编译 IDEA 导入源码, File-&gt;New-&gt;Project From Existing Sources, 选中 spring-framework 源码文件夹，点击 OK，选择 Import project from external model，选中 Gradle，点击 Finish 初次导入 慢慢等待编译完成,直到下面的 Build 看到,我这里是第二次 Build 所以速度比较快,一般第一次视网速,电脑配置而定,大约要 20 分钟左右 将自己项目与刚才编译好的源码相关联,此处可以采用 2 中方式 另外起一个项目,添加 spring 的依赖,然后更改项目的 Project Structure,删除原有从 maven 仓库里导入的 spring 包和源码,添加自己刚才编译好的 jar 包和源码 就在此项目另外添加一个测试的 module,强烈推荐这种方法, 优点: 不用 2 个项目切来切去! 点击 File-&gt;New-&gt;Module…-&gt;Gradle-&gt;Java-&gt;Next添加好的 Module 中,需要更改一下 build.gradle 来添加依赖 compile(project(“:spring-beans”)) 至此环境已经搭建完毕,代码只需要在 source-code-test 中编写,打的断点就能正常进入 可能遇到的错误 编译失败 12345Build file '/Users/leon/Documents/IdeaProjects/github/spring-framework/build.gradle' line: 15An exception occurred applying plugin request [id: 'com.gradle.build-scan', version: '1.8']&gt; Failed to apply plugin [id 'com.gradle.build-scan'] &gt; This version of Gradle requires version 2.0.2 of the build scan plugin or later. Please see https://gradle.com/scans/help/gradle-incompatible-plugin-version for more information. 原因 gradle 版本太高了 plugin1.8 gradle 用 4.1-4.10 (如果 gradle 配置项选的是 wrapper file 方式,那就需要改 gradle-wrapper.properties 自己新建的项目,build.gradle 出现虚线,并且在写测试用例的时候不能引入相关包,出现这个问题是因为 idea 新建 module 默认的 gradle 配置文件名为 build.gradle,需要手动改为${你的 project.name}.gradle 因为官方的 build.gradle 有这一行,此处一定要改,不然自己的 module 不能正确编译 123456rootProject.children.find&#123; it.name == "buildSrc" &#125;.name = "spring-build-src"rootProject.name = "spring"rootProject.children.each &#123;project -&gt; project.buildFileName = "$&#123;project.name&#125;.gradle"&#125; 根目录 build.gradle 文件报错,我这里报的是 DependencyResolveDetails 找不到,此处直接把 DependencyResolveDetails 删掉就行 1234567891011configurations.all &#123; // Check for updates every build resolutionStrategy.cacheChangingModulesFor 0, "seconds" // Consistent slf4j version (e.g. clashes between slf4j versions) resolutionStrategy.eachDependency &#123; DependencyResolveDetails details -&gt; if (details.requested.group == "org.slf4j") &#123; details.useVersion slf4jVersion &#125; &#125; &#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[ArrayList源码剖析]]></title>
    <url>%2F2020%2F09%2F12%2Fypilp6%2F</url>
    <content type="text"><![CDATA[ArrayList 实现了 Iterable,RandomAccess,Collection,List,Cloneable 接口,其中 RandomAccess,Cloneable 和 Serializable 是标记接口,表明实现随机访问,可克隆以及序列化ArrayList 里主要的几个变量 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465//默认初始化大小private static final int DEFAULT_CAPACITY = 10;//用于空实例的共享数组实例private static final Object[] EMPTY_ELEMENTDATA = &#123;&#125;;//用于默认大小的空实例的共享空数组实例private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;//储存ArrayList元素的缓冲区transient Object[] elementData;//ArrayList包含的元素个数private int size;//最大容量private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;protected transient int modCount = 0;//最常用构造函数,构造一个初始化容量为10的数组public ArrayList() &#123; this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;&#125;//调用add方法来向list中添加元素public boolean add(E e) &#123; //判断当前容量是否放的下新增元素,容量够就不变,容量不够扩容 ensureCapacityInternal(size + 1); // Increments modCount!! // elementData[size++] = e; return true;&#125;private void ensureCapacityInternal(int minCapacity) &#123; ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));&#125;private static int calculateCapacity(Object[] elementData, int minCapacity) &#123; //首次添加元素时,elementData中没东西,if表达式为true, minCapacity=1 if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123; //此处直接返回DEFAULT_CAPACITY = 10 return Math.max(DEFAULT_CAPACITY, minCapacity); &#125; return minCapacity;&#125;private void ensureExplicitCapacity(int minCapacity) &#123; //modCount 继承自AbstractList 用于记录list结构修改的次数,即容量改变的次数,容量改变一次此处加一 modCount++; //首次进入minCapacity为10,if 表达式为true // overflow-conscious code if (minCapacity - elementData.length &gt; 0) grow(minCapacity);&#125;private void grow(int minCapacity) &#123; // overflow-conscious code //首次oldCapacity = 0,minCapacity int oldCapacity = elementData.length; //oldCapacity &gt;&gt; 1,右位移运算符 num &gt;&gt; 1,相当于num除以2,所以此处首次仍然为0,newCapacity = minCapacity = 10;复制elementData中1-10个元素到elementData中 int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1); if (newCapacity - minCapacity &lt; 0) newCapacity = minCapacity; if (newCapacity - MAX_ARRAY_SIZE &gt; 0) newCapacity = hugeCapacity(minCapacity); // minCapacity is usually close to size, so this is a win: elementData = Arrays.copyOf(elementData, newCapacity);&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[类加载机制]]></title>
    <url>%2F2020%2F08%2F27%2Fygmbeg%2F</url>
    <content type="text"><![CDATA[=================文字测试一下通过腾讯云 api 调用 github actionflow 发布 githubpage 是否成功 测试推送是否成功]]></content>
  </entry>
</search>
